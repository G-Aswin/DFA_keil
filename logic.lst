


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             DFA,CODE,READONLY
    2 00000000         START
    3 00000000         ; AIM of this Project: to simulate the functioning of a 
                       Deterministic Finite Automata in machine code
    4 00000000         ; Accepted Strings in this automata: (i times 0 then j t
                       imes 1) such that i, j >= 0 and i+j is even.  
    5 00000000         ;          Examples : 01, 0011, 0001, 11 are accepted
    6 00000000         ;               10, 011, 0110 are rejected.
    7 00000000         
    8 00000000         ; Implementation Specification: register r1 contains the
                        string that goes through dfa (max size 8)
    9 00000000         ;        register r0 contains the size of this user stri
                       ng
   10 00000000         ; Final output will be in R0, 0 for rejected and 1 for a
                       ccepted.
   11 00000000         ; Current state of the DFA will be stored in r4
   12 00000000         ; List of accepted states are in the memory "ACCEPTED_ST
                       ATES"
   13 00000000         
   14 00000000         ; HOW TO USE?
   15 00000000         ; Place your String to be tested in REG r1
   16 00000000         ; Enter the size of your string in REG r0
   17 00000000         ; RUN
   18 00000000         
   19 00000000         
   20 00000000 E3A00008        LDR              R0, = 0x8   ;size of user strin
                                                            g
   21 00000004 E59F1090        LDR              r1, = 0x00011111 ;user string
   22 00000008 E3A04000        LDR              r4, = 0x0   ;curr
   23 0000000C E3A05000        LDR              r5, = 0x0   ;next state
   24 00000010 E59F6088        LDR              r6, = TRANSITION_TABLE ;base ad
                                                            dress of the transi
                                                            tion table
   25 00000014 E3A08008        LDR              R8, = 0x8
   26 00000018 E3A09201        LDR              r9, = 0x10000000 ;to get the fi
                                                            rst bit by AND
   27 0000001C         
   28 0000001C         ; SUBS r0, r0, #1
   29 0000001C         LOOP
   30 0000001C E0013009        AND              r3, r1, r9  ;r3 now contains th
                                                            e current input bit
                                                            
   31 00000020 E1A03E23        MOV              r3, r3, LSR #28 ;look up (row =
                                                             curr, col = r3) in
                                                             transition table
   32 00000024 E0050894        MUL              r5, r4, R8  ;generate row addre
                                                            ss
   33 00000028 E0855103        ADD              r5, r3, LSL #2 ;add column addr
                                                             to get correct del
                                                            ta in r5
   34 0000002C         
   35 0000002C E0867005        ADD              R7, R6, r5  ;base addr r6 + del
                                                            ta r5 = final addr 
                                                             
   36 00000030         
   37 00000030 E4974004        LDR              R4, [R7], #4 ;load the next sta
                                                            te into current sta
                                                            te
   38 00000034         



ARM Macro Assembler    Page 2 


   39 00000034         
   40 00000034 E1A01201        MOV              r1, r1, LSL #4 ;move the user s
                                                            tring
   41 00000038 E2500001        SUBS             r0, r0, #1  ;decrement counter
   42 0000003C 1AFFFFF6        BNE              LOOP
   43 00000040         
   44 00000040 E3A09000        LDR              r9, = 0x0
   45 00000044 E3A0A002        LDR              r10, = 0x2  ;number of accepted
                                                             states
   46 00000048 E59FB054        LDR              r11, = ACCEPTED_STATES
   47 0000004C         
   48 0000004C         FIND
   49 0000004C E49BC004        LDR              r12, [r11], #4
   50 00000050 E05CC004        SUBS             r12, r4
   51 00000054 0A000002        BEQ              ACCEPT
   52 00000058         RETURN
   53 00000058 E25AA001        SUBS             r10, r10, #1
   54 0000005C 1AFFFFFA        BNE              FIND
   55 00000060         
   56 00000060 EAFFFFFE 
                       STOP    B                STOP
   57 00000064         
   58 00000064         ACCEPT
   59 00000064 E3A00001        LDR              r0 ,= 0x1
   60 00000068 EAFFFFFA        B                RETURN
   61 0000006C         
   62 0000006C         
   63 0000006C         ; transition table for this DFA
   64 0000006C         
   65 0000006C         ;  curr     for 0    for 1
   66 0000006C         ;  0    1         2
   67 0000006C         ;  1    0         3
   68 0000006C         ;  2    4   3
   69 0000006C         ;  3    4   2
   70 0000006C         ;  4    4   4
   71 0000006C         
   72 0000006C         TRANSITION_TABLE                     ;all these values w
                                                            ill be stored in dy
                                                            namic memory starti
                                                            ng from 0x20
   73 0000006C 00000001 
              00000002 
              00000000 
              00000003 
              00000004 
              00000003 
              00000004 
              00000002 
              00000004 
              00000004         DCD              0x1,0x2,0x0,0x3,0x4,0x3,0x4,0x2
,0x4,0x4
   74 00000094         
   75 00000094         ACCEPTED_STATES                      ;list of accepted s
                                                            tates
   76 00000094 00000000 
              00000003         DCD              0x0,0x3
   77 0000009C         
   78 0000009C                 END
              00011111 



ARM Macro Assembler    Page 3 


              00000000 
              00000000 
Command Line: --debug --xref --bi --apcs=interwork --depend=.\logic.d -o.\logic
.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include --predefine="__EVAL SETA 
1" --list=.\logic.lst logic.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ACCEPT 00000064

Symbol: ACCEPT
   Definitions
      At line 58 in file logic.s
   Uses
      At line 51 in file logic.s
Comment: ACCEPT used once
ACCEPTED_STATES 00000094

Symbol: ACCEPTED_STATES
   Definitions
      At line 75 in file logic.s
   Uses
      At line 46 in file logic.s
Comment: ACCEPTED_STATES used once
DFA 00000000

Symbol: DFA
   Definitions
      At line 1 in file logic.s
   Uses
      None
Comment: DFA unused
FIND 0000004C

Symbol: FIND
   Definitions
      At line 48 in file logic.s
   Uses
      At line 54 in file logic.s
Comment: FIND used once
LOOP 0000001C

Symbol: LOOP
   Definitions
      At line 29 in file logic.s
   Uses
      At line 42 in file logic.s
Comment: LOOP used once
RETURN 00000058

Symbol: RETURN
   Definitions
      At line 52 in file logic.s
   Uses
      At line 60 in file logic.s
Comment: RETURN used once
START 00000000

Symbol: START
   Definitions
      At line 2 in file logic.s
   Uses
      None
Comment: START unused
STOP 00000060

Symbol: STOP



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 56 in file logic.s
   Uses
      At line 56 in file logic.s
Comment: STOP used once
TRANSITION_TABLE 0000006C

Symbol: TRANSITION_TABLE
   Definitions
      At line 72 in file logic.s
   Uses
      At line 24 in file logic.s
Comment: TRANSITION_TABLE used once
9 symbols
342 symbols in table
